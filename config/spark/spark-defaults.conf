#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Default system properties included when running spark-submit.
# This is useful for setting default environmental settings.

# Example:
# spark.master                     spark://master:7077
# spark.eventLog.enabled           true
# spark.eventLog.dir               hdfs://namenode:8021/directory
# spark.serializer                 org.apache.spark.serializer.KryoSerializer
# spark.driver.memory              5g
# spark.executor.extraJavaOptions  -XX:+PrintGCDetails -Dkey=value -Dnumbers="one two three"

# TODO: can I refer to other options' values symbolically in here?
# e.g. spark.yarn.jars=$spark.jars

# keep seeing recommendations for number of cores to be 4-5 (e.g.
# https://aws.amazon.com/blogs/big-data/best-practices-for-successfully-managing-memory-for-apache-spark-applications-on-amazon-emr/
# ) but our simple job does not appear to be CPU bound and that would require using larger EC2 instances


### for standalone Spark:
#spark.master=spark://sparkmaster:7077
## leave spark.executor.cores unset so that all cores of each worker are used as single executor
## see https://spark.apache.org/docs/2.4.4/spark-standalone.html#executors-scheduling
#spark.executor.memory=3g
## and run start-all.sh on sparkmaster

## for YARN:
spark.master=yarn
# if cores isn't set, 1 core per executor will be used
spark.executor.cores=2
spark.executor.memory=512m
# and run start-yarn.sh on geomesa/driver


## dependencies
# allows use of GeoMesa Spark-JTS SQL functions, and required for geomesa_pyspark
spark.jars=local:///home/ubuntu/lib/geomesa-hbase-spark-runtime_2.11-2.4.0.jar

# Spark's Avro support is "built-in but external", so need to include it as dependency
#    see https://spark.apache.org/docs/2.4.4/sql-data-sources-avro.html#deploying
# a spark-avro using scala 2.12 won't work â€” see https://issues.apache.org/jira/browse/SPARK-27623
spark.jars.packages=org.apache.hadoop:hadoop-aws:2.7.7,org.apache.spark:spark-avro_2.11:2.4.4

# only keep application work dirs on workers for 3 days
spark.worker.cleanup.appDataTtl=75600

# our Spark installation isn't on an HDFS cluster, so we don't get data locality benefit from the default spreading out.
# consolidating is more efficient for computation-intensive workloads, but ours is intensive in S3 reads, so we might
# benefit from using more nodes for that reason
#spark.deploy.spreadout=true

# see https://stackoverflow.com/questions/45435237/how-to-connect-with-jmx-remotely-to-spark-worker-on-dataproc
spark.driver.extraJavaOptions=-Dcom.sun.management.jmxremote \
                              -Dcom.sun.management.jmxremote.port=9178 \
                              -Dcom.sun.management.jmxremote.rmi.port=9179 \
                              -Dcom.sun.management.jmxremote.authenticate=false \
                              -Dcom.sun.management.jmxremote.ssl=false
spark.master.extraJavaOptions=-Dcom.sun.management.jmxremote \
                              -Dcom.sun.management.jmxremote.port=9178 \
                              -Dcom.sun.management.jmxremote.rmi.port=9179 \
                              -Dcom.sun.management.jmxremote.authenticate=false \
                              -Dcom.sun.management.jmxremote.ssl=false
spark.executor.extraJavaOptions=-Dcom.sun.management.jmxremote \
                                -Dcom.sun.management.jmxremote.port=0 \
                                -Dcom.sun.management.jmxremote.rmi.port=0 \
                                -Dcom.sun.management.jmxremote.authenticate=false \
                                -Dcom.sun.management.jmxremote.ssl=false

spark.yarn.submit.file.replication=1

# use Java 8's back-ported container-awareness in YARN executors
# (see https://medium.com/logistimo-engineering-blog/oom-killer-and-java-applications-c0dfd7f6b036)
# also, use latest garbage collector and Spark's serializer, as recommended by
# https://aws.amazon.com/blogs/big-data/best-practices-for-successfully-managing-memory-for-apache-spark-applications-on-amazon-emr/
spark.executor.extraJavaOptions=-XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap -XX:+UseG1GC
spark.driver.extraJavaOptions=-XX:+UseG1GC
spark.serializer=org.apache.spark.serializer.KryoSerializer

# necessary for geomesa_pyspark to know how to connect to DB
# linking directly to git clone as hbase otherwise doesn't need to be installed on sparkworkers
spark.driver.extraClassPath=/home/ubuntu/predictrip/config/hbase/
spark.executor.extraClassPath=/home/ubuntu/predictrip/config/hbase/
