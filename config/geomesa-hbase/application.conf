# Copyright Â© 2020 Terry Nycum. All rights reserved except those granted in a LICENSE file.

# Converters describe the format of data in files to be ingested by GeoMesa

# Re Feature IDs:
# The GM docs' general advice is to use an MD5 hash of the "whole record", which makes sense for ensuring uniformity of 
# distribution. It would also potentially allow duplicate insertions to be prevented, but GM reportedly doesn't actually
# enforce uniqueness of the feature ID. It defaults, however, to using UUIDs in which the earlier digits are taken from 
# a Z-ordering of a timestamp and geometry, which is useful if you want to keep features that are clustered in time
# and/or space also clustered in feature-ID space. As feature ID is used as the first component of the HBase key, 
# clustered feature IDs should be more likely to end up in the same database shard. Our typical queries will aggregate
# features that are clustered in time _relative to the week_, though, so for the time component, in place of the real
# full Pickup timestamp, we'll use a "fake" one constructed from just the number of seconds from the start of the week 
# in which the real timestamp falls. In effect we wrap the actual timestamps around the first week of January 1970. One
# of the parameters of the Z3 calculation is the interval at which time is broken up. As all the events happen
# within the first week of January 1970 (start of the Unix epoch) as far as this UUID generation is concerned, we 
# chose the shortest option, day, so that time still gets broken up significantly. Alternatively, week would lead to one
# break (assuming the actual calendar weeks are observed rather than the timestamps simply divided by the number of
# seconds in a canonical week), and month or year would lead to none.

geomesa.converters.nyc-tlc_tripdata_A : {
    fields : [
//        {
//            name : "Vendor_name",
//            transform : "emptyToNull($1)::string"
//        },
        {
            name : "Pickup_datetime",
            transform : "require(date('yyyy-MM-dd HH:mm:ss',emptyToNull($2)))"
        },
        {
            name : "Dropoff_datetime",
            transform : "date('yyyy-MM-dd HH:mm:ss',emptyToNull($3))"
        },
        {
            name : "Passenger_count",
            transform : "emptyToNull($4)::int"
        },
        {
            name : "Trip_distance",
            transform : "emptyToNull($5)::float"
        },
        {
            name : "Pickup_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$6)))::double"
        },
        {
            name : "Pickup_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$7)))::double"
        },
//        {
//            name : "RateCodeID",
//            transform : "emptyToNull($8)::int"
//        },
//        {
//            name : "Store_and_fwd_flag",
//            transform : "emptyToNull($9)::boolean"
//        },
        {
            name : "Dropoff_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$10)))::double"
        },
        {
            name : "Dropoff_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$11)))::double"
        },
//        {
//            name : "Payment_type",
//            transform : "emptyToNull($12)::string"
//        },
//        {
//            name : "Fare_amount",
//            transform : "emptyToNull($13)::float"
//        },
//        {
//            name : "Surcharge",
//            transform : "emptyToNull($14)::float"
//        },
//        {
//            name : "MTA_tax",
//            transform : "emptyToNull($15)::float"
//        },
//        {
//            name : "Tip_amount",
//            transform : "emptyToNull($16)::float"
//        },
//        {
//            name : "Tolls_amount",
//            transform : "emptyToNull($17)::float"
//        },
//        {
//            name : "Total_amount",
//            transform : "emptyToNull($18)::float"
//        },
        {
            name : "Pickup_location",
            transform : "point($Pickup_longitude,$Pickup_latitude)"
        },
        {
            name : "Dropoff_location",
            transform : "point($Dropoff_longitude,$Dropoff_latitude)"
        }
    ],
    type : "delimited-text",
    format : "CSV",
    options : {
        skip-lines : 1, # header
        encoding : "UTF-8",
        error-mode : "skip-bad-records", # raise-errors
        parse-mode : "incremental",
        validators : [
            "index"
        ]
    }
}

geomesa.converters.nyc-tlc_tripdata_B : {
    fields : [
//        {
//            name : "VendorID",
//            transform : "emptyToNull($1)::int"
//        },
        {
            name : "Pickup_datetime",
            transform : "require(date('yyyy-MM-dd HH:mm:ss',emptyToNull($2)))"
        },
        {
            name : "Dropoff_datetime",
            transform : "date('yyyy-MM-dd HH:mm:ss',emptyToNull($3))"
        },
//        {
//            name : "Store_and_fwd_flag",
//            transform : "emptyToNull($4)::boolean"
//        },
//        {
//            name : "RateCodeID",
//            transform : "emptyToNull($5)::int"
//        },
        {
            name : "Pickup_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$6)))::double"
        },
        {
            name : "Pickup_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$7)))::double"
        },
        {
            name : "Dropoff_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$8)))::double"
        },
        {
            name : "Dropoff_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$9)))::double"
        },
        {
            name : "Passenger_count",
            transform : "emptyToNull($10)::int"
        },
        {
            name : "Trip_distance",
            transform : "emptyToNull($11)::float"
        },
//        {
//            name : "Fare_amount",
//            transform : "emptyToNull($12)::float"
//        },
//        {
//            name : "Extra_amount",
//            transform : "emptyToNull($13)::float"
//        },
//        {
//            name : "MTA_tax",
//            transform : "emptyToNull($14)::float"
//        },
//        {
//            name : "Tip_amount",
//            transform : "emptyToNull($15)::float"
//        },
//        {
//            name : "Tolls_amount",
//            transform : "emptyToNull($16)::float"
//        },
//        {
//            name : "EHail_fee",
//            transform : "emptyToNull($17)::float"
//        },
//        {
//            name : "Total_amount",
//            transform : "emptyToNull($18)::float"
//        },
//        {
//            name : "Payment_type",
//            transform : "emptyToNull($19)::string"
//        },
//        {
//            name : "Trip_type",
//            transform : "emptyToNull($20)::int"
//        },
        {
            name : "Pickup_location",
            transform : "point($Pickup_longitude,$Pickup_latitude)"
        },
        {
            name : "Dropoff_location",
            transform : "point($Dropoff_longitude,$Dropoff_latitude)"
        }
    ],
    type : "delimited-text",
    format : "CSV",
    options : {
        skip-lines : 1, # header
        encoding : "UTF-8",
        error-mode : "skip-bad-records", # raise-errors
        parse-mode : "incremental",
        validators : [
            "index"
        ]
    }
}

geomesa.converters.nyc-tlc_tripdata_C : {
    fields : [
//        {
//            name : "VendorID",
//            transform : "emptyToNull($1)::int"
//        },
        {
            name : "Pickup_datetime",
            transform : "require(date('yyyy-MM-dd HH:mm:ss',emptyToNull($2)))"
        },
        {
            name : "Dropoff_datetime",
            transform : "date('yyyy-MM-dd HH:mm:ss',emptyToNull($3))"
        },
//        {
//            name : "Store_and_fwd_flag",
//            transform : "emptyToNull($4)::boolean"
//        },
//        {
//            name : "RateCodeID",
//            transform : "emptyToNull($5)::int"
//        },
        {
            name : "Pickup_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$6)))::double"
        },
        {
            name : "Pickup_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$7)))::double"
        },
        {
            name : "Dropoff_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$8)))::double"
        },
        {
            name : "Dropoff_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$9)))::double"
        },
        {
            name : "Passenger_count",
            transform : "emptyToNull($10)::int"
        },
        {
            name : "Trip_distance",
            transform : "emptyToNull($11)::float"
        },
//        {
//            name : "Fare_amount",
//            transform : "emptyToNull($12)::float"
//        },
//        {
//            name : "Extra_amount",
//            transform : "emptyToNull($13)::float"
//        },
//        {
//            name : "MTA_tax",
//            transform : "emptyToNull($14)::float"
//        },
//        {
//            name : "Tip_amount",
//            transform : "emptyToNull($15)::float"
//        },
//        {
//            name : "Tolls_amount",
//            transform : "emptyToNull($16)::float"
//        },
//        {
//            name : "EHail_fee",
//            transform : "emptyToNull($17)::float"
//        },
//        {
//            name : "Improvement_surcharge",
//            transform : "emptyToNull($18)::float"
//        },
//        {
//            name : "Total_amount",
//            transform : "emptyToNull($19)::float"
//        },
//        {
//            name : "Payment_type",
//            transform : "emptyToNull($20)::string"
//        },
//        {
//            name : "Trip_type",
//            transform : "emptyToNull($21)::int"
//        },
        {
            name : "Pickup_location",
            transform : "point($Pickup_longitude,$Pickup_latitude)"
        },
        {
            name : "Dropoff_location",
            transform : "point($Dropoff_longitude,$Dropoff_latitude)"
        }
    ],
    type : "delimited-text",
    format : "CSV",
    options : {
        skip-lines : 1, # header
        encoding : "UTF-8",
        error-mode : "skip-bad-records", # raise-errors
        parse-mode : "incremental",
        validators : [
            "index"
        ]
    }
}

geomesa.converters.nyc-tlc_tripdata_D : {
    fields : [
//        {
//            name : "Vendor_name",
//            transform : "emptyToNull($1)::string"
//        },
        {
            name : "Pickup_datetime",
            transform : "require(date('yyyy-MM-dd HH:mm:ss',emptyToNull($2)))"
        },
        {
            name : "Dropoff_datetime",
            transform : "date('yyyy-MM-dd HH:mm:ss',emptyToNull($3))"
        },
        {
            name : "Passenger_count",
            transform : "emptyToNull($4)::int"
        },
        {
            name : "Trip_distance",
            transform : "emptyToNull($5)::float"
        },
        {
            name : "Pickup_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$6)))::double"
        },
        {
            name : "Pickup_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$7)))::double"
        },
//        {
//            name : "RateCodeID",
//            transform : "emptyToNull($8)::int"
//        },
//        {
//            name : "Store_and_fwd_flag",
//            transform : "emptyToNull($9)::boolean"
//        },
        {
            name : "Dropoff_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$10)))::double"
        },
        {
            name : "Dropoff_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$11)))::double"
        },
//        {
//            name : "Payment_type",
//            transform : "emptyToNull($12)::string"
//        },
//        {
//            name : "Fare_amount",
//            transform : "emptyToNull($13)::float"
//        },
//        {
//            name : "Extra_amount",
//            transform : "emptyToNull($14)::float"
//        },
//        {
//            name : "MTA_tax",
//            transform : "emptyToNull($15)::float"
//        },
//        {
//            name : "Tip_amount",
//            transform : "emptyToNull($16)::float"
//        },
//        {
//            name : "Tolls_amount",
//            transform : "emptyToNull($17)::float"
//        },
//        {
//            name : "Improvement_surcharge",
//            transform : "emptyToNull($18)::float"
//        },
//        {
//            name : "Total_amount",
//            transform : "emptyToNull($19)::float"
//        },
        {
            name : "Pickup_location",
            transform : "point($Pickup_longitude,$Pickup_latitude)"
        },
        {
            name : "Dropoff_location",
            transform : "point($Dropoff_longitude,$Dropoff_latitude)"
        }
    ],
    type : "delimited-text",
    format : "CSV",
    options : {
        skip-lines : 1, # header
        encoding : "UTF-8",
        error-mode : "skip-bad-records", # raise-errors
        parse-mode : "incremental",
        validators : [
            "index"
        ]
    }
}

geomesa.converters.nyc-tlc_tripdata_E : {
    fields : [
//        {
//            name : "Vendor_name",
//            transform : "emptyToNull($1)::string"
//        },
        {
            name : "Pickup_datetime",
            transform : "require(date('yyyy-MM-dd HH:mm:ss',emptyToNull($2)))"
        },
        {
            name : "Dropoff_datetime",
            transform : "date('yyyy-MM-dd HH:mm:ss',emptyToNull($3))"
        },
        {
            name : "Passenger_count",
            transform : "emptyToNull($4)::int"
        },
        {
            name : "Trip_distance",
            transform : "emptyToNull($5)::float"
        },
        {
            name : "Pickup_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$6)))::double"
        },
        {
            name : "Pickup_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$7)))::double"
        },
//        {
//            name : "RateCodeID",
//            transform : "emptyToNull($8)::int"
//        },
//        {
//            name : "Store_and_fwd_flag",
//            transform : "emptyToNull($9)::boolean"
//        },
        {
            name : "Dropoff_longitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$10)))::double"
        },
        {
            name : "Dropoff_latitude",
            transform : "require(emptyToNull(regexReplace('^0$'::r,'',$11)))::double"
        },
//        {
//            name : "Payment_type",
//            transform : "emptyToNull($12)::string"
//        },
//        {
//            name : "Fare_amount",
//            transform : "emptyToNull($13)::float"
//        },
//        {
//            name : "Extra",
//            transform : "emptyToNull($14)::float"
//        },
//        {
//            name : "MTA_tax",
//            transform : "emptyToNull($15)::float"
//        },
//        {
//            name : "Tip_amount",
//            transform : "emptyToNull($16)::float"
//        },
//        {
//            name : "Tolls_amount",
//            transform : "emptyToNull($17)::float"
//        },
//        {
//            name : "Improvement_surcharge",
//            transform : "emptyToNull($18)::float"
//        },
//        {
//            name : "Total_amount",
//            transform : "emptyToNull($19)::float"
//        },
        {
            name : "Pickup_location",
            transform : "point($Pickup_longitude,$Pickup_latitude)"
        },
        {
            name : "Dropoff_location",
            transform : "point($Dropoff_longitude,$Dropoff_latitude)"
        }
    ],
    type : "delimited-text",
    format : "CSV",
    options : {
        skip-lines : 1, # header
        encoding   : "UTF-8",
        error-mode : "skip-bad-records", # raise-errors
        parse-mode : "incremental",
        validators : [
            "index"
        ]
    }
}

geomesa.converters.intermediate_avro : {
    fields : [
        {
            name : "Pickup_Location",
            transform : "point(avroPath($1,'/Pickup_Longitude')::float, avroPath($1,'/Pickup_Latitude')::float)"
        },
        {
            name : "Pickup_DateTime",
            transform : "secsToDate(avroPath($1,'/Pickup_SecondOfUnixEpoch')::long)"
        },
        {
            name : "Pickup_SecondOfWeek",
            transform : "avroPath($1,'/Pickup_SecondOfWeek')::int"
        },
        {
            name : "Dropoff_Location",
            transform : "point(avroPath($1,'/Dropoff_Longitude')::float, avroPath($1,'/Dropoff_Latitude')::float)"
        },
        {
            name : "Passenger_Count",
            transform : "avroPath($1,'/Passenger_Count')::int"
        }
    ],
    id-field  : "uuidZ3(point(avroPath($1,'/Pickup_Longitude')::float, avroPath($1,'/Pickup_Latitude')::float), secsToDate(avroPath($1,'/Pickup_SecondOfWeek')::int), 'day')",
    options : {
        encoding : "UTF-8",
        # alternative is "skip-bad-records", but I want to be alerted to potentially missed cleaning opportunities
        error-mode : "raise-errors",
        parse-mode : "incremental",
        validators : [
            "index"
        ]
    },
    schema : "embedded",
    type : "avro"
}

# SimpleFeatureTypes (SFTs) are like table schemas, describing the desired storage in GeoMesa data stores

# The following accommodates geomesa_pyspark's unintended requirement that columns be in lexicographic order
# In the interest of minimizing record size, it also currently doesn't prepare for summarization, which would involve
# adding a new Trip_Count integer and changing Passenger_Count to float.

# The temporal interval of any z3 index should strike a compromise between the "by nothing" (i.e. no sharding) that
# would be best for the usual queries from the front-end, which aren't temporally bounded (except within week) and what
# would be best for the queries involved in the maintenance cycle, which would want to find a day's or week's worth of
# trips for summarization or deletion (depending on age). With a caching layer implemented, monthly might strike a
# better balance, but for now, with no (separate) caching layer, we might want to choose yearly to prioritize
# performance of the much more frequent reads from the front-end.

# potential column groups:
#   f: columns needing to be read to filter
#   s: columns needing to be read only for those features that pass filter
#   i: columns already included in indices, so often unnecessary to read at all

geomesa.sfts.trip : {
    attributes : [
        {
            name            : "Dropoff_Location",
            type            : "Point",
            srid            : 4326,
            default         : true,
            cardinality     : high,
            keep-stats      : true
        },
        {
            name            : "Passenger_Count",
            type            : "Integer",
            cardinality     : low
        },
        {
            name            : "Pickup_DateTime",
            type            : "Timestamp",
            cardinality     : high,
            keep-stats      : true
        },
        {
            name            : "Pickup_Location",
            type            : "Point",
            srid            : 4326,
            cardinality     : high,
            keep-stats      : true
        },
        {
            name            : "Pickup_SecondOfWeek",
            type            : "Integer",
            cardinality     : high
        }
    ],
    type-name : "trip",
    user-data : {
        # in case this isn't otherwise inferred from the id-field specified in the converter
        geomesa.fid.uuid        : true,
        geomesa.indices.enabled : "z2:Pickup_Location,attr:Pickup_SecondOfWeek,attr:Pickup_DateTime",
        # to reduce record size, serialize geometries using TWKB with 5 decimal places of precision (about 1 meter)
        precision               : 5,
        geomesa.stats.enable    : true
    }
}
